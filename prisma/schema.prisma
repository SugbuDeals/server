generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  role      UserRole @default(CONSUMER)
  storeId   Int?     @unique

  StoreBookmark   StoreBookmark[]
  ProductBookmark ProductBookmark[]
  Store           Store?            @relation(fields: [storeId], references: [id], onUpdate: Cascade, onDelete: SetNull)
}

enum UserRole {
  CONSUMER
  RETAILER
  ADMIN
}

model Store {
  id                 Int                     @id @default(autoincrement())
  name               String
  description        String
  createdAt          DateTime                @default(now())
  verificationStatus StoreVerificationStatus @default(UNVERIFIED)
  owner              User?

  Product       Product[]
  StoreBookmark StoreBookmark[]
}

enum StoreVerificationStatus {
  UNVERIFIED
  VERIFIED
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal
  stock       Int
  createdAt   DateTime @default(now())
  isActive    Boolean  @default(true)
  storeId     Int

  store      Store       @relation(fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  Promotion  Promotion[]
  Category   Category?   @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  categoryId Int?

  ProductBookmark ProductBookmark[]
}

model Promotion {
  id          Int       @id @default(autoincrement())
  title       String
  type        String
  description String
  startsAt    DateTime  @default(now())
  endsAt      DateTime?
  active      Boolean   @default(true)
  discount    Float     @default(0)

  product   Product? @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  productId Int?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Product Product[]
}

model StoreBookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  storeId   Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  store Store @relation(fields: [storeId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, storeId])
}

model ProductBookmark {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([userId, productId])
}
